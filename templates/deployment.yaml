---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    name: app-deployment
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      initContainers:
        - name: {{ .Values.initContainers.flywayMigration.name }}
          image: {{ .Values.initContainers.flywayMigration.image }}
          imagePullPolicy: Always
          env:
            - name: FLYWAY_URL
              value: "jdbc:postgresql://{{ .Values.postgresql.host }}:{{ .Values.postgresql.port }}/{{ .Values.postgresql.database }}"
            - name: FLYWAY_USER
              value: "{{ .Values.postgresql.username }}"
            - name: FLYWAY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.passwordSecretName }}
                  key: password
            - name: FLYWAY_LOCATIONS
              value: "filesystem:/flyway/sql"
            - name: FLYWAY_SCHEMAS
              value: "cve"
          volumeMounts:
            - name: pgdata
              mountPath: /data
      containers:
        - name: app-container
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          env:
            - name: DB_URL
              value: "{{ .Values.postgresql.DB_URL }}"
            - name: KAFKA_BROKER1
              value: "{{ .Values.kafka.broker1 }}"
            - name: KAFKA_BROKER2
              value: "{{ .Values.kafka.broker2 }}"
            - name: KAFKA_BROKER3
              value: "{{ .Values.kafka.broker3 }}"
            - name: KAFKA_TOPIC
              value: "{{ .Values.kafka.topic }}"
            - name: KAFKA_USERNAME
              value: "{{ .Values.kafka.username }}"
            - name: KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kafka.passwordSecretName }}
                  key: password
          volumeMounts:
            - name: pgdata
              mountPath: /data
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.probes.liveness.port }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.probes.readiness.port }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: {{ .Values.volumeClaim.name }}
 
