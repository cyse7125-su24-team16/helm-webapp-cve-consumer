---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    name: app-deployment
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      initContainers:
        - name: {{ .Values.initContainers.flywayMigration.name }}
          image: {{ .Values.initContainers.flywayMigration.image }}
          imagePullPolicy: Always
          env:
            - name: FLYWAY_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMapName }}
                  key: FLYWAY_URL
            - name: FLYWAY_USER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMapName }}
                  key: FLYWAY_USER
            - name: FLYWAY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.passwordSecretName }}
                  key: password
            - name: FLYWAY_LOCATIONS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMapName }}
                  key: FLYWAY_LOCATIONS
            - name: FLYWAY_SCHEMAS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMapName }}
                  key: FLYWAY_SCHEMAS
      containers:
        - name: app-container
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          env:
            - name: DB_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMapName }}
                  key: DB_URL
            - name: KAFKA_BROKER1
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMapName }}
                  key: KAFKA_BROKER1
            - name: KAFKA_BROKER2
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMapName }}
                  key: KAFKA_BROKER2
            - name: KAFKA_BROKER3
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMapName }}
                  key: KAFKA_BROKER3
            - name: KAFKA_TOPIC
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMapName }}
                  key: KAFKA_TOPIC
            - name: KAFKA_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMapName }}
                  key: KAFKA_USERNAME
            - name: KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kafka.passwordSecretName }}
                  key: password
          resources:
            requests:
              cpu: "{{ .Values.resources.requests.cpu }}"
              memory: "{{ .Values.resources.requests.memory }}"
            limits:
              cpu: "{{ .Values.resources.limits.cpu }}"
              memory: "{{ .Values.resources.limits.memory }}"
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.probes.liveness.port }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.probes.readiness.port }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - my-app
                topologyKey: topology.kubernetes.io/zone
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.kubernetes.io/zone
                    operator: In
                    values:
                      - us-east-1a
                      - us-east-1b
                      - us-east-1c
